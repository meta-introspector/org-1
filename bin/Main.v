(** File generated by coq-of-ocaml *)
Require Import CoqOfOCaml.CoqOfOCaml.
Require Import CoqOfOCaml.Settings.

Definition read_lines {A : Set} (function_parameter : unit) : A :=
  let '_ := function_parameter in
  op_startypeminuserrorstar
    (op_startypeminuserrorstar op_startypeminuserrorstar).

Definition from_file {A B : Set} (filename : A) : B :=
  op_startypeminuserrorstar (op_startypeminuserrorstar filename).

Definition generate {A B C : Set}
  (backend : A) (output : string) (opts : B) (filename : string) : C :=
  let lines {D : Set} : D :=
    if equiv_decb filename "-" then
      read_lines tt
    else
      from_file filename in
  op_startypeminuserrorstar lines
    (fun (lines : list string) =>
      let config {D : Set} : D :=
        {| |} in
      let ast {D : Set} : D :=
        op_startypeminuserrorstar config
          (Stdlib.String.concat (String.String "010" "") lines) in
      let document {D : Set} : D :=
        op_startypeminuserrorstar None ast in
      let export {D : Set} : D :=
        op_startypeminuserrorstar backend in
      let E :=
        (* ❌ No module type was found for this structure. *)
        no_expected_module_type_found in
      let output :=
        if equiv_decb output "" then
          op_startypeminuserrorstar filename
        else
          output in
      let fdout :=
        if equiv_decb output "-" then
          Stdlib.stdout
        else
          Stdlib.open_out output in
      let result_value {D : Set} : D :=
        op_startypeminuserrorstar export config document fdout in
      op_startypeminuserrorstar result_value).

Definition output : bool :=
  let doc := "Write the generated file to $(docv). " in
  andb op_startypeminuserrorstar
    (andb (op_startypeminuserrorstar op_startypeminuserrorstar "")
      (op_startypeminuserrorstar [ "o"; "output" ] "OUTPUT-FILE" doc)).

Definition backend : bool :=
  let doc := "Uses $(docv) to generate the output. (`-` for stdout)" in
  andb op_startypeminuserrorstar
    (andb (op_startypeminuserrorstar op_startypeminuserrorstar "html")
      (op_startypeminuserrorstar [ "b"; "backend" ] "BACKEND" doc)).

Definition filename : bool :=
  let doc := "The input filename to use. (`-` for stdin) " in
  andb op_startypeminuserrorstar
    (andb (op_startypeminuserrorstar 0 op_startypeminuserrorstar "-")
      (op_startypeminuserrorstar nil "FILENAME" doc)).

Definition options : bool :=
  let doc :=
    "Extra option to use to configure the behaviour. (Can be used multiple times)"
    in
  andb op_startypeminuserrorstar
    (andb
      (op_startypeminuserrorstar
        (op_startypeminuserrorstar "=" % char op_startypeminuserrorstar
          op_startypeminuserrorstar) nil)
      (op_startypeminuserrorstar [ "x"; "option" ] "OPTIONS" doc)).

Definition cmd {A : Set} : A := op_startypeminuserrorstar.

Definition doc : string := "converts org-mode files into various formats".

Definition options {A : Set} : list A := nil.

Definition man : list Variant.t :=
  CoqOfOCaml.Stdlib.app
    [
      Variant.Build "S" string "DESCRIPTION";
      Variant.Build "P" string
        "$(tname) can currently converts org-mode files into other formats such as"
          ++ String.String "010" "       HTML."
    ] options.

Definition infos {A : Set} : A :=
  op_startypeminuserrorstar "mldoc_org" "0" doc man.

Definition main {A : Set} (function_parameter : unit) : A :=
  let '_ := function_parameter in
  match op_startypeminuserrorstar (cmd, infos) with
  | Error _ => Stdlib.exit 1
  | Ok expr => op_startypeminuserrorstar expr
  | _ => Stdlib.exit 0
  end.

(** Init function; without side-effects in Coq *)
Definition init_module : unit :=
  let '_ := Stdlib.Printexc.record_backtrace true in
  if negb (Stdlib.op_exclamation Stdlib.Sys.interactive) then
    main tt
  else
    tt.
