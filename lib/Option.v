(** File generated by coq-of-ocaml *)
Require Import CoqOfOCaml.CoqOfOCaml.
Require Import CoqOfOCaml.Settings.

Definition t (a : Set) : Set := option a.

Definition some {A : Set} (x_value : A) : option A := Some x_value.

Definition may {A : Set} (f_value : A -> unit) (function_parameter : option A)
  : unit :=
  match function_parameter with
  | None => tt
  | Some v_value => f_value v_value
  end.

Definition map {A B : Set} (f_value : A -> B) (function_parameter : option A)
  : option B :=
  match function_parameter with
  | None => None
  | Some v_value => Some (f_value v_value)
  end.

Definition apply {A : Set} (function_parameter : option (A -> A)) : A -> A :=
  match function_parameter with
  | None => fun (x_value : A) => x_value
  | Some f_value => f_value
  end.

Definition filter {A : Set}
  (f_value : A -> bool) (function_parameter : option A) : option A :=
  match
    (function_parameter,
      match function_parameter with
      | Some x_value => f_value x_value
      | _ => false
      end) with
  | (Some x_value, true) => Some x_value
  | (_, _) => None
  end.

Definition default {A : Set} (v_value : A) (function_parameter : option A)
  : A :=
  match function_parameter with
  | None => v_value
  | Some v_value => v_value
  end.

Definition default_delayed {A : Set}
  (l_value : unit -> A) (function_parameter : option A) : A :=
  match function_parameter with
  | None => l_value tt
  | Some v_value => v_value
  end.

Definition is_some {A : Set} (function_parameter : option A) : bool :=
  match function_parameter with
  | None => false
  | _ => true
  end.

Definition is_none {A : Set} (function_parameter : option A) : bool :=
  match function_parameter with
  | None => true
  | _ => false
  end.

Definition get_exn {A : Set} (s_value : option A) (e_value : extensible_type)
  : A :=
  match s_value with
  | None => Stdlib.raise e_value
  | Some v_value => v_value
  end.

Definition get {A : Set} (s_value : option A) : A :=
  get_exn s_value (Build_extensible "Invalid_argument" string "Option.get").

Definition map_default {A B : Set}
  (f_value : A -> B) (v_value : B) (function_parameter : option A) : B :=
  match function_parameter with
  | None => v_value
  | Some v2 => f_value v2
  end.

Definition map_default_delayed {A B : Set}
  (f_value : A -> B) (l_value : unit -> B) (function_parameter : option A)
  : B :=
  match function_parameter with
  | None => l_value tt
  | Some v_value => f_value v_value
  end.

Definition compare {A : Set} (op_staroptstar : option (A -> A -> int))
  : option A -> option A -> int :=
  let cmp :=
    match op_staroptstar with
    | Some op_starsthstar => op_starsthstar
    | None => Stdlib.Pervasives.compare
    end in
  fun (a_value : option A) =>
    fun (b_value : option A) =>
      match a_value with
      | None =>
        match b_value with
        | None => 0
        | Some _ => (-1)
        end
      | Some x_value =>
        match b_value with
        | None => 1
        | Some y_value => cmp x_value y_value
        end
      end.

Definition eq {A : Set} (op_staroptstar : option (A -> A -> bool))
  : option A -> option A -> bool :=
  let eq :=
    match op_staroptstar with
    | Some op_starsthstar => op_starsthstar
    | None => equiv_decb
    end in
  fun (x_value : option A) =>
    fun (y_value : option A) =>
      match (x_value, y_value) with
      | (None, None) => true
      | (Some a_value, Some b_value) => eq a_value b_value
      | _ => false
      end.

Module Monad.
  Definition m (a : Set) : Set := option a.
  
  Definition _return {A : Set} (x_value : A) : option A := Some x_value.
  
  Definition bind {A B : Set} (m_value : option A) (f_value : A -> option B)
    : option B :=
    match m_value with
    | None => None
    | Some x_value => f_value x_value
    end.
End Monad.

Definition bind {A B : Set} : option A -> (A -> option B) -> option B :=
  Monad.bind.

Module Labels.
  Definition may {A : Set} (f_value : A -> unit) (o_value : option A) : unit :=
    may f_value o_value.
  
  Definition map {A B : Set} (f_value : A -> B) (o_value : option A)
    : option B := map f_value o_value.
  
  Definition map_default {A B : Set}
    (f_value : A -> B) (d_value : B) (o_value : option A) : B :=
    map_default f_value d_value o_value.
End Labels.

Module Infix.
  Definition op_pipequestion {A : Set} (x_value : option A) (def : A) : A :=
    default def x_value.
  
  Definition op_gtgteq {A B : Set} : option A -> (A -> option B) -> option B :=
    Monad.bind.
End Infix.

Include Infix.
