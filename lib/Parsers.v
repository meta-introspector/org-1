(** File generated by coq-of-ocaml *)
Require Import CoqOfOCaml.CoqOfOCaml.
Require Import CoqOfOCaml.Settings.

Definition is_space (function_parameter : ascii) : bool :=
  match function_parameter with
  | (" " % char | "009" % char | "026" % char | "012" % char) => true
  | _ => false
  end.

Definition non_space {A : Set} : A := op_startypeminuserrorstar negb is_space.

Definition is_eol (function_parameter : ascii) : bool :=
  match function_parameter with
  | ("013" % char | "010" % char) => true
  | _ => false
  end.

Definition non_eol {A : Set} : A := op_startypeminuserrorstar negb is_eol.

Definition non_space_eol {A : Set} (c_value : A) : bool :=
  andb (non_space c_value) (non_eol c_value).

Definition is_hex (function_parameter : ascii) : bool :=
  match function_parameter with
  |
    ("0" % char | "1" % char | "2" % char | "3" % char | "4" % char | "5" % char
    | "6" % char | "7" % char | "8" % char | "9" % char | "a" % char |
    "b" % char | "c" % char | "d" % char | "e" % char | "f" % char | "A" % char
    | "B" % char | "C" % char | "D" % char | "E" % char | "F" % char) => true
  | _ => false
  end.

Definition digits {A : Set} : A :=
  op_startypeminuserrorstar op_startypeminuserrorstar.

Definition eol {A : Set} : A := op_startypeminuserrorstar is_eol.

Definition eols {A : Set} : A := op_startypeminuserrorstar is_eol.

Definition two_eols {A B : Set} (result_value : A) : B :=
  op_startypeminuserrorstar (op_startypeminuserrorstar eol eol)
    (op_startypeminuserrorstar result_value).

Definition ws {A : Set} : A := op_startypeminuserrorstar is_space.

Definition spaces {A : Set} : A := op_startypeminuserrorstar is_space.

Definition spaces_or_eols {A : Set} : A :=
  op_startypeminuserrorstar
    (fun (c_value : ascii) => orb (is_eol c_value) (is_space c_value)).

Definition non_spaces {A : Set} : A := op_startypeminuserrorstar non_space_eol.

Definition letters {A : Set} : A :=
  op_startypeminuserrorstar op_startypeminuserrorstar.

Definition count_spaces {A : Set} : A := op_startypeminuserrorstar is_space.

Definition lex {A B : Set} (p_value : A) : B :=
  op_startypeminuserrorstar p_value spaces.

Definition optional {A B : Set} (p_value : A) : B :=
  op_startypeminuserrorstar None
    (op_startypeminuserrorstar (fun (x_value : C) => Some x_value) p_value).

Definition optional_list {A B : Set} (p_value : A) : B :=
  op_startypeminuserrorstar nil p_value.

Definition lift5 {A B C D E F G : Set}
  (f_value : A) (a_value : B) (b_value : C) (c_value : D) (d_value : E)
  (e_value : F) : G :=
  op_startypeminuserrorstar
    (op_startypeminuserrorstar f_value a_value b_value c_value d_value) e_value.

Definition between_char {A B C D : Set} (c1 : A) (c2 : B) (p_value : C) : D :=
  op_startypeminuserrorstar
    (op_startypeminuserrorstar (op_startypeminuserrorstar c1) p_value)
    (op_startypeminuserrorstar c2).

Definition between_string {A B C D : Set} (begin' : A) (end' : B) (p_value : C)
  : D :=
  op_startypeminuserrorstar
    (op_startypeminuserrorstar (op_startypeminuserrorstar begin') p_value)
    (op_startypeminuserrorstar end').

Definition between_string_ci {A B C D : Set}
  (begin' : A) (end' : B) (p_value : C) : D :=
  op_startypeminuserrorstar
    (op_startypeminuserrorstar (op_startypeminuserrorstar begin') p_value)
    (op_startypeminuserrorstar end').

Definition chainl1 {A B C : Set} (e_value : A) (op : B) : C :=
  let fix go {D E : Set} (acc : D) : E :=
    op_startypeminuserrorstar
      (op_startypeminuserrorstar
        (op_startypeminuserrorstar
          (fun (f_value : D -> F -> G) =>
            fun (x_value : F) => f_value acc x_value) op e_value) go)
      (op_startypeminuserrorstar acc) in
  op_startypeminuserrorstar e_value (fun (init : D) => go init).

Definition end_string {A B : Set}
  (s_value : string) (op_staroptstar : option bool) : (string -> A) -> B :=
  let ci :=
    match op_staroptstar with
    | Some op_starsthstar => op_starsthstar
    | None => false
    end in
  fun (f_value : string -> A) =>
    let last_s :=
      Stdlib.String.sub s_value (Z.sub (CoqOfOCaml.String.length s_value) 1) 1
      in
    let prev := Stdlib.ref_value None in
    let string_equal (x_value : string) (y_value : string) : bool :=
      if ci then
        equiv_decb (Stdlib.String.lowercase_ascii x_value)
          (Stdlib.String.lowercase_ascii y_value)
      else
        equiv_decb x_value y_value in
    op_startypeminuserrorstar
      (op_startypeminuserrorstar
        (op_startypeminuserrorstar
          (fun (c_value : ascii) =>
            let p_value :=
              match Stdlib.op_exclamation prev with
              | None => Stdlib.String.make 1 c_value
              | Some s' =>
                let s' := String.append s' (Stdlib.String.make 1 c_value) in
                if
                  CoqOfOCaml.Stdlib.gt (CoqOfOCaml.String.length s')
                    (CoqOfOCaml.String.length s_value)
                then
                  Stdlib.String.sub s' 1 (CoqOfOCaml.String.length s_value)
                else
                  s'
              end in
            let '_ := Stdlib.op_coloneq prev (Some p_value) in
            if string_equal p_value s_value then
              false
            else
              true)) (op_startypeminuserrorstar last_s))
      (fun (s' : string) =>
        let p_value := Stdlib.op_exclamation prev in
        let '_ := Stdlib.op_coloneq prev None in
        match p_value with
        | None => op_startypeminuserrorstar "end string"
        | Some x_value =>
          if string_equal x_value s_value then
            let s' :=
              Stdlib.String.sub s' 0
                (Z.add
                  (Z.sub (CoqOfOCaml.String.length s')
                    (CoqOfOCaml.String.length s_value)) 1) in
            op_startypeminuserrorstar (f_value s')
          else
            op_startypeminuserrorstar "end_string"
        end).

Definition peek_line {A : Set} : A :=
  op_startypeminuserrorstar
    (op_startypeminuserrorstar
      (fun (c_value : ascii) =>
        orb (equiv_decb c_value "013" % char) (equiv_decb c_value "010" % char))).

Definition peek_spaces {A : Set} : A := op_startypeminuserrorstar ws.

Definition take_till1 {A B : Set} (f_value : A -> bool) : B :=
  op_startypeminuserrorstar (fun (c_value : A) => negb (f_value c_value)).

Definition line {A : Set} : A := take_till1 is_eol.

Definition line_without_spaces {A : Set} : A :=
  take_till1
    (fun (c_value : ascii) =>
      orb (equiv_decb c_value "013" % char)
        (orb (equiv_decb c_value "010" % char) (equiv_decb c_value " " % char))).

Definition word {A : Set} : A := take_till1 non_space.

Definition clear_parser_resource {A B C D : Set}
  (p_value : Stdlib.ref (list A) -> B) (r_value : Stdlib.ref (list A))
  (_error : C) : D :=
  op_startypeminuserrorstar (p_value r_value)
    (fun (result_value : E) =>
      let '_ := Stdlib.op_coloneq r_value nil in
      op_startypeminuserrorstar (op_startypeminuserrorstar result_value)
        (let '_ := Stdlib.op_coloneq r_value nil in
        op_startypeminuserrorstar _error)).

Definition between_lines {A B : Set} (op_staroptstar : option bool)
  : (string -> bool) -> A -> B :=
  let trim :=
    match op_staroptstar with
    | Some op_starsthstar => op_starsthstar
    | None => true
    end in
  fun (end_check : string -> bool) =>
    fun (_error : A) =>
      let p_value {C : Set} (lines : Stdlib.ref (list string)) : C :=
        op_startypeminuserrorstar
          (fun (body_parser : D) =>
            op_startypeminuserrorstar
              (op_startypeminuserrorstar
                (op_startypeminuserrorstar (optional eols) (take_till1 is_eol))
                (optional eols))
              (fun (line : string) =>
                let line :=
                  if trim then
                    Stdlib.String.trim line
                  else
                    line in
                if end_check line then
                  op_startypeminuserrorstar
                    (List.rev (Stdlib.op_exclamation lines))
                else
                  let '_ :=
                    Stdlib.op_coloneq lines
                      (cons line (Stdlib.op_exclamation lines)) in
                  body_parser)) in
      clear_parser_resource p_value (Stdlib.ref_value nil) _error.

Definition between_eols {A B : Set} (p_value : A) : B :=
  op_startypeminuserrorstar
    (op_startypeminuserrorstar
      (op_startypeminuserrorstar (optional eols) (optional spaces)) p_value)
    (optional eols).
