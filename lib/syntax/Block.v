(** File generated by coq-of-ocaml *)
Require Import CoqOfOCaml.CoqOfOCaml.
Require Import CoqOfOCaml.Settings.

Definition results {A : Set} : A :=
  op_startypeminuserrorstar
    (op_startypeminuserrorstar op_startypeminuserrorstar
      (op_startypeminuserrorstar "#+RESULTS:"))
    (fun (function_parameter : B) =>
      let '_ := function_parameter in
      op_startypeminuserrorstar [ op_startypeminuserrorstar ]).

Definition verbatim {A B : Set} (lines : Stdlib.ref (list A)) : B :=
  op_startypeminuserrorstar
    (fun (verbatim : C) =>
      op_startypeminuserrorstar
        (op_startypeminuserrorstar
          (op_startypeminuserrorstar
            (op_startypeminuserrorstar op_startypeminuserrorstar
              (op_startypeminuserrorstar ":" % char))
            (op_startypeminuserrorstar op_startypeminuserrorstar))
          (op_startypeminuserrorstar op_startypeminuserrorstar))
        (fun (line : A) =>
          let '_ :=
            Stdlib.op_coloneq lines (cons line (Stdlib.op_exclamation lines)) in
          op_startypeminuserrorstar verbatim
            (if equiv_decb (Stdlib.op_exclamation lines) nil then
              op_startypeminuserrorstar "verbatim"
            else
              op_startypeminuserrorstar (List.rev (Stdlib.op_exclamation lines))))).

Definition block_name_options_parser {A : Set} : A :=
  op_startypeminuserrorstar
    (op_startypeminuserrorstar
      (fun (name : B) =>
        fun (options : option string) =>
          match options with
          | (None | Some "") => (name, None)
          | _ => (name, options)
          end)
      (op_startypeminuserrorstar (op_startypeminuserrorstar "#+begin_")
        op_startypeminuserrorstar)
      (op_startypeminuserrorstar op_startypeminuserrorstar
        (op_startypeminuserrorstar op_startypeminuserrorstar)))
    (op_startypeminuserrorstar op_startypeminuserrorstar).

Definition list_content_parsers {A B C : Set} (config : A) (block_parse : B)
  : C :=
  op_startypeminuserrorstar
    (op_startypeminuserrorstar
      [
        op_startypeminuserrorstar;
        block_parse;
        op_startypeminuserrorstar;
        op_startypeminuserrorstar;
        op_startypeminuserrorstar;
        op_startypeminuserrorstar;
        results;
        op_startypeminuserrorstar;
        op_startypeminuserrorstar config
          [
            op_startypeminuserrorstar;
            block_parse;
            op_startypeminuserrorstar;
            op_startypeminuserrorstar;
            op_startypeminuserrorstar;
            op_startypeminuserrorstar;
            results;
            op_startypeminuserrorstar
          ]
      ]).

Definition block_content_parsers {A B C : Set} (config : A) (block_parse : B)
  : C :=
  let list_content_parser {D : Set} : D :=
    list_content_parsers config block_parse in
  op_startypeminuserrorstar
    (op_startypeminuserrorstar
      [
        op_startypeminuserrorstar;
        op_startypeminuserrorstar list_content_parser;
        block_parse;
        op_startypeminuserrorstar;
        op_startypeminuserrorstar;
        op_startypeminuserrorstar;
        op_startypeminuserrorstar;
        results;
        op_startypeminuserrorstar;
        op_startypeminuserrorstar config
          [
            op_startypeminuserrorstar;
            op_startypeminuserrorstar list_content_parser;
            block_parse;
            op_startypeminuserrorstar;
            op_startypeminuserrorstar;
            op_startypeminuserrorstar;
            op_startypeminuserrorstar;
            results;
            op_startypeminuserrorstar
          ]
      ]).

Definition separate_name_options (function_parameter : option string)
  : option string * option (list string) :=
  match function_parameter with
  | None => (None, None)
  | Some s_value =>
    match Stdlib.String.split_on_char " " % char s_value with
    | [] => (None, None)
    | cons name [] => ((Some name), None)
    | cons name options => ((Some name), (Some options))
    end
  end.

Definition parse {A B : Set} (config : A) : B :=
  op_startypeminuserrorstar
    (fun (parse : C) =>
      let p_value {C : Set} : C :=
        op_startypeminuserrorstar op_startypeminuserrorstar
          (fun (function_parameter : ascii) =>
            match function_parameter with
            | "#" % char =>
              op_startypeminuserrorstar block_name_options_parser
                (fun (function_parameter : string * option string) =>
                  let '(name, options) := function_parameter in
                  op_startypeminuserrorstar
                    (op_startypeminuserrorstar false
                      (fun (line : string) =>
                        let prefix := String.append "#+end_" name in
                        op_startypeminuserrorstar (Stdlib.String.trim line)
                          prefix) "block")
                    (fun (lines : list string) =>
                      let lines :=
                        if equiv_decb lines nil then
                          nil
                        else
                          let indent {D : Set} : D :=
                            op_startypeminuserrorstar (Stdlib.List.hd lines) in
                          if equiv_decb indent 0 then
                            lines
                          else
                            List.map
                              (fun (line : string) =>
                                Stdlib.String.sub line indent
                                  (Z.sub (CoqOfOCaml.String.length line) indent))
                              lines in
                      let name := Stdlib.String.lowercase_ascii name in
                      match name with
                      | "src" =>
                        let '(language, options) :=
                          separate_name_options options in
                        [ op_startypeminuserrorstar ]
                      | "example" => [ op_startypeminuserrorstar ]
                      | "quote" =>
                        let content :=
                          Stdlib.String.concat (String.String "010" "") lines in
                        let result_value {D : Set} : list D :=
                          match
                            op_startypeminuserrorstar
                              (block_content_parsers config parse) content with
                          | Stdlib.Ok result_value => result_value
                          | Stdlib.Error _e => nil
                          end in
                        [ op_startypeminuserrorstar ]
                      | "export" =>
                        let '(name, options) := separate_name_options options in
                        let name :=
                          match name with
                          | None => ""
                          | Some s_value => s_value
                          end in
                        let content :=
                          Stdlib.String.concat (String.String "010" "") lines in
                        [ op_startypeminuserrorstar ]
                      | "comment" => [ op_startypeminuserrorstar ]
                      | _ =>
                        let content :=
                          Stdlib.String.concat (String.String "010" "") lines in
                        let result_value {D : Set} : list D :=
                          match
                            op_startypeminuserrorstar
                              (block_content_parsers config parse) content with
                          | Stdlib.Ok result_value => result_value
                          | Stdlib.Error _e => nil
                          end in
                        [ op_startypeminuserrorstar ]
                      end))
            | ":" % char =>
              op_startypeminuserrorstar (verbatim (Stdlib.ref_value nil))
                (fun (lines : D) => [ op_startypeminuserrorstar ])
            | _ => op_startypeminuserrorstar "block"
            end) in
      op_startypeminuserrorstar p_value).
