(** File generated by coq-of-ocaml *)
Require Import CoqOfOCaml.CoqOfOCaml.
Require Import CoqOfOCaml.Settings.

Definition indent_parser {A : Set} : A :=
  op_startypeminuserrorstar
    (op_startypeminuserrorstar op_startypeminuserrorstar
      (fun (s_value : string) => CoqOfOCaml.String.length s_value))
    (op_startypeminuserrorstar 0).

Definition check_listitem {A : Set} (line : string) : A * bool * option int :=
  let indent {B : Set} : B :=
    op_startypeminuserrorstar line in
  let number :=
    (* ❌ Try-with are not handled *)
    try_with
      (fun _ =>
        Stdlib.Scanf.sscanf (Stdlib.String.trim line)
          (CamlinternalFormatBasics.Format
            (CamlinternalFormatBasics.Int CamlinternalFormatBasics.Int_d
              CamlinternalFormatBasics.No_padding
              CamlinternalFormatBasics.No_precision
              CamlinternalFormatBasics.End_of_format) "%d")
          (fun (x_value : int) => Some x_value)) (fun _ => None) in
  match number with
  | Some number => (indent, true, (Some number))
  | None =>
    if
      CoqOfOCaml.Stdlib.ge (Z.sub (CoqOfOCaml.String.length line) indent) 2
    then
      let prefix := Stdlib.String.sub line indent 2 in
      (indent,
        (orb (equiv_decb prefix "- ")
          (orb (equiv_decb prefix "+ ")
            (andb (nequiv_decb indent 0) (equiv_decb prefix "* ")))), None)
    else
      (indent, false, None)
  end.

Definition terminator {A B : Set} (items : Stdlib.ref (list A)) : B :=
  if equiv_decb (Stdlib.op_exclamation items) nil then
    op_startypeminuserrorstar "list"
  else
    let result_value := Stdlib.op_exclamation items in
    op_startypeminuserrorstar (List.rev result_value).

Definition content_parser {A B C D E F : Set}
  (list_parser : A -> Stdlib.ref (list B) -> C -> D) (content_parsers : A)
  (indent : E) (lines : Stdlib.ref (list string)) : F :=
  op_startypeminuserrorstar
    (fun (content_parser : G) =>
      op_startypeminuserrorstar
        (op_startypeminuserrorstar op_startypeminuserrorstar)
        (fun (content : string) =>
          let '_ :=
            Stdlib.op_coloneq lines (cons content (Stdlib.op_exclamation lines))
            in
          op_startypeminuserrorstar
            (op_startypeminuserrorstar
              ((List.rev (Stdlib.op_exclamation lines)), nil))
            (op_startypeminuserrorstar
              (op_startypeminuserrorstar op_startypeminuserrorstar)
              (op_startypeminuserrorstar op_startypeminuserrorstar
                (fun (function_parameter : option G) =>
                  match function_parameter with
                  | None =>
                    op_startypeminuserrorstar
                      ((List.rev (Stdlib.op_exclamation lines)), nil)
                  | Some c_value =>
                    if op_startypeminuserrorstar c_value then
                      let '_ :=
                        Stdlib.op_coloneq lines
                          (cons (String.String "010" "")
                            (Stdlib.op_exclamation lines)) in
                      op_startypeminuserrorstar op_startypeminuserrorstar
                        content_parser
                    else
                      if op_startypeminuserrorstar c_value then
                        op_startypeminuserrorstar op_startypeminuserrorstar
                          (fun (content : string) =>
                            in
                            if is_item then
                              if CoqOfOCaml.Stdlib.le indent' indent then
                                op_startypeminuserrorstar
                                  ((List.rev (Stdlib.op_exclamation lines)), nil)
                              else
                                op_startypeminuserrorstar
                                  (list_parser content_parsers
                                    (Stdlib.ref_value nil) indent')
                                  (fun (items : G) =>
                                    op_startypeminuserrorstar
                                      ((List.rev (Stdlib.op_exclamation lines)),
                                        items))
                            else
                              op_startypeminuserrorstar
                                (op_startypeminuserrorstar
                                  op_startypeminuserrorstar) content_parser)
                      else
                        op_startypeminuserrorstar
                          ((List.rev (Stdlib.op_exclamation lines)), nil)
                  end))))).

Definition format_parser {A : Set} (indent : int) : A :=
  let choices {B : Set} : B :=
    if equiv_decb indent 0 then
      op_startypeminuserrorstar (op_startypeminuserrorstar "+" % char)
        (op_startypeminuserrorstar "-" % char)
    else
      op_startypeminuserrorstar
        (op_startypeminuserrorstar (op_startypeminuserrorstar "+" % char)
          (op_startypeminuserrorstar "-" % char))
        (op_startypeminuserrorstar "*" % char) in
  let unordered_format {B : Set} : B :=
    op_startypeminuserrorstar
      (op_startypeminuserrorstar choices op_startypeminuserrorstar)
      (op_startypeminuserrorstar None) in
  let ordered_format {B : Set} : B :=
    op_startypeminuserrorstar
      (op_startypeminuserrorstar
        (op_startypeminuserrorstar op_startypeminuserrorstar
          (op_startypeminuserrorstar "." % char)) op_startypeminuserrorstar)
      (fun (number : C) => op_startypeminuserrorstar (Some number)) in
  op_startypeminuserrorstar unordered_format ordered_format.

Definition checkbox_parser {A : Set} : A :=
  op_startypeminuserrorstar
    (op_startypeminuserrorstar
      (op_startypeminuserrorstar (op_startypeminuserrorstar "[ ]")
        (op_startypeminuserrorstar (Some false)))
      (op_startypeminuserrorstar (op_startypeminuserrorstar "[X]")
        (op_startypeminuserrorstar (Some true))))
    (op_startypeminuserrorstar None).

Definition format_checkbox_parser {A : Set} (indent : int) : A :=
  op_startypeminuserrorstar
    (fun (format : B) => fun (checkbox : B) => (format, checkbox))
    (format_parser indent)
    (op_startypeminuserrorstar checkbox_parser op_startypeminuserrorstar).

Definition definition {A : Set} (s_value : string) : option A * string :=
  let name_parser {B : Set} : B :=
    op_startypeminuserrorstar " ::" (fun (s_value : C) => s_value) in
  match op_startypeminuserrorstar name_parser s_value with
  | Stdlib.Ok name =>
    let l_value := Z.add (CoqOfOCaml.String.length name) 3 in
    let nc := Stdlib.String.get s_value l_value in
    if orb (op_startypeminuserrorstar nc) (op_startypeminuserrorstar nc) then
      ((Some name),
        (Stdlib.String.sub s_value l_value
          (Z.sub (CoqOfOCaml.String.length s_value) l_value)))
    else
      (None, s_value)
  | Stdlib.Error _e => (None, s_value)
  end.

Fixpoint list_parser {A B C : Set}
  (content_parsers : A) (items : Stdlib.ref (list B)) (last_indent : int) : C :=
  op_startypeminuserrorstar
    (fun (list_value : D) =>
      op_startypeminuserrorstar indent_parser
        (fun (indent : int) =>
          if CoqOfOCaml.Stdlib.gt last_indent indent then
            terminator items
          else
            let content_parser {D E F : Set} (number : option D) (checkbox : E)
              : F :=
              op_startypeminuserrorstar
                (content_parser list_parser content_parsers indent
                  (Stdlib.ref_value nil))
                (fun (function_parameter : list string * G) =>
                  let '(content, children) := function_parameter in
                  let ordered :=
                    match number with
                    | Some _ => true
                    | None => false
                    end in
                  let content := List.map Stdlib.String.trim content in
                  let content :=
                    Stdlib.String.concat (String.String "010" "") content in
                  in
                  let content {G : Set} : list G :=
                    match op_startypeminuserrorstar content_parsers content with
                    | Stdlib.Ok result_value => Stdlib.List.concat result_value
                    | Stdlib.Error _e => nil
                    end in
                  let item {G : Set} : G :=
                    {| |} in
                  let '_ :=
                    Stdlib.op_coloneq items
                      (cons item (Stdlib.op_exclamation items)) in
                  list_value) in
            op_startypeminuserrorstar
              (op_startypeminuserrorstar (op_startypeminuserrorstar indent)
                (op_startypeminuserrorstar (format_checkbox_parser indent)
                  (fun (function_parameter : option string * D) =>
                    let '(number, checkbox) := function_parameter in
                    match number with
                    | None => content_parser None checkbox
                    | Some number =>
                      content_parser
                        (Some (CoqOfOCaml.Stdlib.int_of_string number)) checkbox
                    end))) (terminator items))).

Definition parse {A B : Set} (content_parsers : A) : B :=
  let r_value {C : Set} : Stdlib.ref (list C) :=
    Stdlib.ref_value nil in
  let p_value {C : Set} : C :=
    list_parser content_parsers r_value 0 in
  op_startypeminuserrorstar
    (op_startypeminuserrorstar
      (op_startypeminuserrorstar op_startypeminuserrorstar) p_value)
    (fun (result_value : C) =>
      let '_ := Stdlib.op_coloneq r_value nil in
      op_startypeminuserrorstar
        (op_startypeminuserrorstar [ op_startypeminuserrorstar ])
        (let '_ := Stdlib.op_coloneq r_value nil in
        op_startypeminuserrorstar "list")).
