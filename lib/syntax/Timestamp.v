(** File generated by coq-of-ocaml *)
Require Import CoqOfOCaml.CoqOfOCaml.
Require Import CoqOfOCaml.Settings.

Module date.
  Record record : Set := Build {
    year : int;
    month : int;
    day : int;
  }.
  Definition with_year year (r : record) :=
    Build year r.(month) r.(day).
  Definition with_month month (r : record) :=
    Build r.(year) month r.(day).
  Definition with_day day (r : record) :=
    Build r.(year) r.(month) day.
End date.
Definition date := date.record.

Module time.
  Record record : Set := Build {
    hour : int;
    min : int;
  }.
  Definition with_hour hour (r : record) :=
    Build hour r.(min).
  Definition with_min min (r : record) :=
    Build r.(hour) min.
End time.
Definition time := time.record.

Inductive repetition_kind : Set :=
| Plus : repetition_kind
| DoublePlus : repetition_kind
| Dotted : repetition_kind.

Inductive repetition_duration : Set :=
| Hour : repetition_duration
| Day : repetition_duration
| Week : repetition_duration
| Month : repetition_duration
| Year : repetition_duration.

Module t.
  Record record : Set := Build {
    date : date;
    wday : string;
    time : option time;
    repetition : option (repetition_kind * repetition_duration * int);
    active : bool;
  }.
  Definition with_date date (r : record) :=
    Build date r.(wday) r.(time) r.(repetition) r.(active).
  Definition with_wday wday (r : record) :=
    Build r.(date) wday r.(time) r.(repetition) r.(active).
  Definition with_time time (r : record) :=
    Build r.(date) r.(wday) time r.(repetition) r.(active).
  Definition with_repetition repetition (r : record) :=
    Build r.(date) r.(wday) r.(time) repetition r.(active).
  Definition with_active active (r : record) :=
    Build r.(date) r.(wday) r.(time) r.(repetition) active.
End t.
Definition t := t.record.

Module range.
  Record record : Set := Build {
    start : t;
    stop : t;
  }.
  Definition with_start start (r : record) :=
    Build start r.(stop).
  Definition with_stop stop (r : record) :=
    Build r.(start) stop.
End range.
Definition range := range.record.

Definition year (t_value : t) : int := t_value.(t.date).(date.year).

Definition month (t_value : t) : int := t_value.(t.date).(date.month).

Definition day (t_value : t) : int := t_value.(t.date).(date.day).

Definition hour {A : Set} (t_value : t) : A :=
  op_startypeminuserrorstar (fun (x_value : time) => x_value.(time.hour)) 0
    t_value.(t.time).

Definition min {A : Set} (t_value : t) : A :=
  op_startypeminuserrorstar (fun (x_value : time) => x_value.(time.min)) 0
    t_value.(t.time).

Definition hour_opt {A : Set} (t_value : t) : A :=
  op_startypeminuserrorstar (fun (x_value : time) => Some x_value.(time.hour))
    None t_value.(t.time).

Definition min_opt {A : Set} (t_value : t) : A :=
  op_startypeminuserrorstar (fun (x_value : time) => Some x_value.(time.min))
    None t_value.(t.time).

Definition null_date : date :=
  {| date.year := 0; date.month := 0; date.day := 0; |}.

Definition parse_time (s_value : string) : option time :=
  (* ❌ Try-with are not handled *)
  try_with
    (fun _ =>
      Stdlib.Scanf.sscanf s_value
        (CamlinternalFormatBasics.Format
          (CamlinternalFormatBasics.Int CamlinternalFormatBasics.Int_d
            CamlinternalFormatBasics.No_padding
            CamlinternalFormatBasics.No_precision
            (CamlinternalFormatBasics.Char_literal ":" % char
              (CamlinternalFormatBasics.Int CamlinternalFormatBasics.Int_d
                CamlinternalFormatBasics.No_padding
                CamlinternalFormatBasics.No_precision
                CamlinternalFormatBasics.End_of_format))) "%d:%d")
        (fun (hour : int) =>
          fun (min : int) => Some {| time.hour := hour; time.min := min; |}))
    (fun _ => None).

Definition parse_date (s_value : string) : option date :=
  (* ❌ Try-with are not handled *)
  try_with
    (fun _ =>
      Stdlib.Scanf.sscanf s_value
        (CamlinternalFormatBasics.Format
          (CamlinternalFormatBasics.Int CamlinternalFormatBasics.Int_d
            CamlinternalFormatBasics.No_padding
            CamlinternalFormatBasics.No_precision
            (CamlinternalFormatBasics.Char_literal "-" % char
              (CamlinternalFormatBasics.Int CamlinternalFormatBasics.Int_d
                CamlinternalFormatBasics.No_padding
                CamlinternalFormatBasics.No_precision
                (CamlinternalFormatBasics.Char_literal "-" % char
                  (CamlinternalFormatBasics.Int CamlinternalFormatBasics.Int_d
                    CamlinternalFormatBasics.No_padding
                    CamlinternalFormatBasics.No_precision
                    CamlinternalFormatBasics.End_of_format))))) "%d-%d-%d")
        (fun (year : int) =>
          fun (month : int) =>
            fun (day : int) =>
              Some
                {| date.year := year; date.month := month; date.day := day; |}))
    (fun _ => None).

Definition repetition_kind_to_string (function_parameter : repetition_kind)
  : string :=
  match function_parameter with
  | Plus => "+"
  | DoublePlus => "++"
  | Dotted => "."
  end.

Definition parse_repetition_marker {A : Set} (kind : A) (s_value : string)
  : option (A * repetition_duration * int) :=
  (* ❌ Try-with are not handled *)
  try_with
    (fun _ =>
      Stdlib.Scanf.sscanf s_value
        (CamlinternalFormatBasics.Format
          (CamlinternalFormatBasics.Int CamlinternalFormatBasics.Int_d
            CamlinternalFormatBasics.No_padding
            CamlinternalFormatBasics.No_precision
            (CamlinternalFormatBasics.Char
              CamlinternalFormatBasics.End_of_format)) "%d%c")
        (fun (n_value : int) =>
          fun (c_value : ascii) =>
            match c_value with
            | "h" % char => Some (kind, Hour, n_value)
            | "d" % char => Some (kind, Day, n_value)
            | "w" % char => Some (kind, Week, n_value)
            | "m" % char => Some (kind, Month, n_value)
            | "y" % char => Some (kind, Year, n_value)
            | _ => None
            end)) (fun _ => None).

Definition date_to_string (d_value : date) : string :=
  Stdlib.Printf.sprintf
    (CamlinternalFormatBasics.Format
      (CamlinternalFormatBasics.Int CamlinternalFormatBasics.Int_d
        CamlinternalFormatBasics.No_padding
        CamlinternalFormatBasics.No_precision
        (CamlinternalFormatBasics.Char_literal "-" % char
          (CamlinternalFormatBasics.Int CamlinternalFormatBasics.Int_d
            (CamlinternalFormatBasics.Lit_padding CamlinternalFormatBasics.Zeros
              2) CamlinternalFormatBasics.No_precision
            (CamlinternalFormatBasics.Char_literal "-" % char
              (CamlinternalFormatBasics.Int CamlinternalFormatBasics.Int_d
                (CamlinternalFormatBasics.Lit_padding
                  CamlinternalFormatBasics.Zeros 2)
                CamlinternalFormatBasics.No_precision
                CamlinternalFormatBasics.End_of_format))))) "%d-%02d-%02d")
    d_value.(date.year) d_value.(date.month) d_value.(date.day).

Definition time_to_string (t_value : time) : string :=
  Stdlib.Printf.sprintf
    (CamlinternalFormatBasics.Format
      (CamlinternalFormatBasics.Int CamlinternalFormatBasics.Int_d
        (CamlinternalFormatBasics.Lit_padding CamlinternalFormatBasics.Zeros 2)
        CamlinternalFormatBasics.No_precision
        (CamlinternalFormatBasics.Char_literal ":" % char
          (CamlinternalFormatBasics.Int CamlinternalFormatBasics.Int_d
            (CamlinternalFormatBasics.Lit_padding CamlinternalFormatBasics.Zeros
              2) CamlinternalFormatBasics.No_precision
            CamlinternalFormatBasics.End_of_format))) "%02d:%02d")
    t_value.(time.hour) t_value.(time.min).

Definition repetition_duration_to_string
  (function_parameter : repetition_duration) : string :=
  match function_parameter with
  | Hour => "h"
  | Day => "d"
  | Week => "w"
  | Month => "m"
  | Year => "y"
  end.

Definition repetition_to_string
  (function_parameter : repetition_kind * repetition_duration * int) : string :=
  let '(kind, duration, n_value) := function_parameter in
  let kind := repetition_kind_to_string kind in
  let duration := repetition_duration_to_string duration in
  Stdlib.Printf.sprintf
    (CamlinternalFormatBasics.Format
      (CamlinternalFormatBasics.String CamlinternalFormatBasics.No_padding
        (CamlinternalFormatBasics.Int CamlinternalFormatBasics.Int_d
          CamlinternalFormatBasics.No_padding
          CamlinternalFormatBasics.No_precision
          (CamlinternalFormatBasics.String CamlinternalFormatBasics.No_padding
            CamlinternalFormatBasics.End_of_format))) "%s%d%s") kind n_value
    duration.

Definition to_string (t_value : t) : string :=
  Stdlib.Printf.sprintf
    (CamlinternalFormatBasics.Format
      (CamlinternalFormatBasics.Char
        (CamlinternalFormatBasics.String CamlinternalFormatBasics.No_padding
          (CamlinternalFormatBasics.Char CamlinternalFormatBasics.End_of_format)))
      "%c%s%c")
    (if t_value.(t.active) then
      "<" % char
    else
      "[" % char)
    (Stdlib.String.concat " "
      (op_startypeminuserrorstar op_startypeminuserrorstar
        [
          Some (date_to_string t_value.(t.date));
          Some t_value.(t.wday);
          Stdlib.Option.map time_to_string t_value.(t.time);
          Stdlib.Option.map repetition_to_string t_value.(t.repetition)
        ]))
    (if t_value.(t.active) then
      ">" % char
    else
      "]" % char).

Definition range_to_string (function_parameter : range) : string :=
  let '{| range.start := start; range.stop := stop |} := function_parameter in
  Stdlib.Printf.sprintf
    (CamlinternalFormatBasics.Format
      (CamlinternalFormatBasics.String CamlinternalFormatBasics.No_padding
        (CamlinternalFormatBasics.String_literal "--"
          (CamlinternalFormatBasics.String CamlinternalFormatBasics.No_padding
            CamlinternalFormatBasics.End_of_format))) "%s--%s")
    (to_string start) (to_string stop).

Definition sub (d_value : date) (d' : date) : date :=
  {| date.year := Z.sub d'.(date.year) d_value.(date.year);
    date.month := Z.sub d'.(date.month) d_value.(date.month);
    date.day := Z.sub d'.(date.day) d_value.(date.day); |}.

Definition repetition_parser {A B : Set}
  (s_value : string) (date : A) (time : B) (c_value : ascii)
  : A * B * option (repetition_kind * repetition_duration * int) :=
  if nequiv_decb (Stdlib.String.get s_value 1) "+" % char then
    let repetition :=
      parse_repetition_marker Plus
        (Stdlib.String.sub s_value 1
          (Z.sub (CoqOfOCaml.String.length s_value) 1)) in
    (date, time, repetition)
  else
    let kind :=
      if equiv_decb c_value "+" % char then
        DoublePlus
      else
        Dotted in
    let repetition :=
      parse_repetition_marker kind
        (Stdlib.String.sub s_value 2
          (Z.sub (CoqOfOCaml.String.length s_value) 2)) in
    (date, time, repetition).
